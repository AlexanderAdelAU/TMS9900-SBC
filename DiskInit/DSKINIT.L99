                        ;
                        ;****************************************
                        ;
                        ;	DISK INITIALISER
                        ;
                        ;	THIS PROGRAMME WILL INITIALISE THE BAT ETC
                        ;
                        ;**************************************
                        ;
                        ;
  0000                  R0	EQU	0
  0001                  R1	EQU	1
  0002                  R2	EQU	2
  0003                  R3	EQU	3
  0004                  R4	EQU	4
  0005                  R5	EQU	5
  0006                  R6	EQU	6
  0007                  R7	EQU	7
  0008                  R8	EQU	8
  0009                  SL	EQU	9
  000A                  SP	EQU	10
  000B                  R11	EQU	11
  000C                  R12	EQU	12
  000D                  R13	EQU	13
  000E                  R14	EQU	14
  000F                  R15	EQU	15
                        ;
                        ;	DEFINE SOME XOP'S
                        ;
                        	DXOP	CALL,6
                        	DXOP	RET,7
                        	DXOP	PUSH,8
                        	DXOP	POP,9
                        	DXOP	WHEX,10
                        	DXOP	WRITE,12		;WRITE CHAR IN MSB
                        	DXOP	READ,13			;READ CHAR IN MSB
                        	DXOP	MESG,14			;OUTPUT NULL TERMINATED MESSAGE
                        ;
                        ;
  0100                  	AORG	0100H
  0100   1048           	JMP	START
                        ;	
                        ;
                        ;
                        ;---FCB ENTRY EQUATES
                        ;
  0010                  FLA	EQU	16			;LOAD ADDRESS	
  001A                  CRN	EQU	26			;NEXT RECORD TO READ
  000C                  FSB	EQU	12			;TWO BYTES HOLD TRACK AND SECTOR
  000E                  FSZ	EQU	14			;NUMBER OF SECTORS TO LOAD
                        ;
                        ;NOTE THERE ARE NOW 12 SECTORS PER BLOCK
                        ;SO SECTOR 2 IS THE FIRST BLOCK AFTER THE BOOT SECTOR
                        ;
                        ;SO WORD BELOW IS INTERPRETED AS
                        ; FSB, FSZ AND FLA
                        ;
                        
                        ;
                        ;--SYSTEM DIRECTORY ENTRY BLOCKS
                        ;
                        ;
  0102   5348 454C      SHELL	TEXT	'SHELL   SYS'
  0106   4C20 2020      
  010A   5359 53        
  010D   00             	BYTE	0			;FILE TYPE
  010E   0002 0007      	WORD	2,7,0CA00H,0,0,0,0,0,0,0	;FSB,FSZ,FLA  4 SECT PER BLOCK MEANS 2 BATS IF 5
  0112   CA00 0000      
  0116   0000 0000      
  011A   0000 0000      
  011E   0000 0000      
                        ;
  0122   4244 4F53      BDOS	TEXT	'BDOS    SYS'
  0126   2020 2020      
  012A   5359 53        
  012D   00             	BYTE	0
  012E   0004 0007      	WORD	4,7,0D800H,0,0,0,0,0,0,0 	;TWO BAT ENTERIES
  0132   D800 0000      
  0136   0000 0000      
  013A   0000 0000      
  013E   0000 0000      
                        ;
  0142   5341 5645      SAVE	TEXT	'SAVE    EXE'		;NOTE, DON'T LOAD SAVE
  0146   2020 2020      
  014A   4558 45        
  014D   02             	BYTE	2			;TYPE 2 IS EXECUTABLE
  014E   0006 0002      	WORD	6,2,0C200H,0,0,0,0,0,0,0 	;SAVE COMMAND ONE BAT ENTERY
  0152   C200 0000      
  0156   0000 0000      
  015A   0000 0000      
  015E   0000 0000      
                        
  0162   4449 5220      DIR	TEXT	'DIR     EXE'			;NOTE, DON'T LOAD SAVE
  0166   2020 2020      
  016A   4558 45        
  016D   02             	BYTE	2				;TYPE 2 IS EXECUTABLE
  016E   0007 0002      	WORD	7,2,0C400H,0,0,0,0,0,0,0 	;SAVE COMMAND ONE BAT ENTERY
  0172   C400 0000      
  0176   0000 0000      
  017A   0000 0000      
  017E   0000 0000      
                        
                        ;
                        ;BAT INITIALISER 
                        ;
  0182   FFF8 FFF8      BATINT	WORD	0FFF8H,0FFF8H	;RESERVERD FOR BOOT,BAT AND DIRECTORY ENTRIES + FUTURE
  0186   0002 FFF8      	WORD	2,0FFF8H		;SHELL [BLOCKS 2 AND 3]
  018A   0004 FFF8      	WORD	4,0FFF8H		;BDOS [BLOCKS 4 AND 5]
  018E   FFF8           	WORD	0FFF8H		;SAVE [BLOCK 6]
  0190   0000           	WORD	0		;END OF TABLE
                        ;
  E600                  MONITOR	EQU	0E600H
  CA00                  ENTSHELL	EQU	0CA00H
  F000                  DEBUG	EQU	0F000H
  E628                  WBOOT	EQU	MONITOR+10*4	;WARM BOOT
  E610                  SELDSK	EQU	MONITOR+4*4		;SELECT A DISK
  E614                  RECAL	EQU	MONITOR+5*4		;HOME THE DRIVE
  E618                  SEEK	EQU	MONITOR+6*4		;SEEK A TRACK
  E61C                  RDREC	EQU	MONITOR+7*4		;READ A SECTOR
  E620                  WRREC	EQU	MONITOR+8*4		;WRITE A SECTOR
  E624                  RDID	EQU	MONITOR+9*4
                        ;
                        ;
  0050                  TRKDSK	EQU	80		;TRACKS PER DISK SIDE
  0012                  SECTRK	EQU	18		;SECTORS PER TRACK
  0200                  BYTSEC	EQU	512		;BYTES PER SECTOR
  0004                  SECBLK	EQU	4		;SECTOR PER BLOCK
  0002                  NSIDES	EQU	2		;NUMBER OF SIDES
  0001                  RSVDSEC	EQU	1		;RESERVED SECTORS FOR BOOT SECTOR
  0B40                  SECDSK	EQU	NSIDES*SECTRK*TRKDSK	;SECTORS ON DISK
  0001                  NBATS	EQU	1		;NO OF BAT ENTRIES
  0002                  BATSEC	EQU	RSVDSEC+1		;START SECTOR
  0000                  BATTRK	EQU	0		;START TRACK
  0000                  DIRTRK	EQU	0		;DIRECTORY STARTS HERE
  0005                  FDIRSEC	EQU	5
  0004                  NDIRSEC	EQU	4
  000B                  NAMSIZ	EQU	11		;DIRECTORY NAME SIZE
                        ;
                        ;
                        ;
                        ;	AS WE ARE USING OUR OWN WP, WE NEED TO RETURN DIRECTLY TO SHELL
                        ;
  0192                  	EVEN
  0192   02E0 C726      START	LWPI	WORKSP			;USE LOCAL WORKSPACE	
  0196   020A C786      	LI	SP,STACKP
  019A   0209 C746      	LI	SL,STACKL
  019E   0420 E600      	BLWP	@MONITOR		;SET UP SYSTEM VECTORS THROUGH MONITOR
  01A2   04C2           	CLR	R2			;ALWAYS DRIVE A
  01A4   2DA0 E610      	CALL	@SELDSK			;SELECT
  01A8   2DA0 E614      	CALL	@RECAL			;HOME
  01AC   2DA0 01C8      	CALL	@INITBOOT		;INITIALISE BOOT SECTOR
  01B0   2DA0 01D6      	CALL	@INITBAT		;INITIALISE BAT
  01B4   2DA0 024C      	CALL	@INITDIR		;INITIALISE DIRECTORY	
  01B8   2DA0 0290      	CALL	@INITSYS		;INITIALISE SYSTEM FILES
  01BC   0200 0014      	LI	R0,20
  01C0   2DA0 02FA      	CALL	@WAIT
  01C4   0460 F000      EXIT	B	@DEBUG
                        ;
                        ;--INITIALISE THE BOOT SECTOR
                        ;
  01C8   0204 C600      INITBOOT 	LI	R4,LOADER		;ADDRESS OF LOADER MODULE
  01CC   0203 0001      	LI	R3,1		;BOOT SECTOR
  01D0   2DA0 E620      	CALL	@WRREC		;WRITE OUT THE LOADER
  01D4   2DC0           	RET		
                        ;
                        ;
                        ;INITIALISE THE BAT
                        ;
                        ;
  01D6   0201 C788      INITBAT	LI	R1,IOBUF
  01DA   0200 0200      	LI	R0,BYTSEC		;FLUSH BUFFER
  01DE   04F1           IBAT1	CLR	*R1+		;CLEAR BAT ENTRY
  01E0   0640           	DECT	R0		;FINISHED ?
  01E2   16FD           	JNE	IBAT1
                        ;
                        ;--BAT INITIALISER TABLE TRANSFERRED
                        ;
  01E4   0200 0182      	LI	R0,BATINT		;BAT ALLOCATION TABLE
  01E8   0201 C788      	LI	R1,IOBUF
  01EC   CC70           IBAT2	MOV	*R0+,*R1+		;ZERO INDICATES END OF TABLE
  01EE   16FE           	JNE	IBAT2	
  01F0   0203 0000      	LI	R3,BATTRK		;SEEK BAT TRACK
  01F4   2DA0 E618      	CALL	@SEEK		;GO SEEK
  01F8   0204 C788      	LI	R4,IOBUF
  01FC   0203 0002      	LI	R3,BATSEC
  0200   2DA0 E620      	CALL	@WRREC		;WRITE OUT THE BUFFER
                        ;
                        ;	NEXT BAT SECTOR
                        ;
  0204   0201 C788      	LI	R1,IOBUF
  0208   0200 0200      	LI	R0,BYTSEC	;INDEX TO LAST ENTRY
  020C   04F1           IBAT3	CLR	*R1+		;CLEAR BAT ENTRY
  020E   0640           	DECT	R0		;FINISHED ?
  0210   16FD           	JNE	IBAT3
  0212   0203 0000      	LI	R3,BATTRK	;SEEK BAT TRACK
  0216   2DA0 E618      	CALL	@SEEK		;GO SEEK
  021A   0204 C788      	LI	R4,IOBUF
  021E   0203 0003      	LI	R3,BATSEC + 1
  0222   2DA0 E620      	CALL	@WRREC		;WRITE OUT THE BUFFER
                        ;
                        ; 	LAST BAT SECTOR
                        ;
  0226   0201 C788      	LI	R1,IOBUF
  022A   0200 00D0      	LI	R0,720-512 	;LAST BAT ENTRY
  022E   04F1           IBAT4	CLR	*R1+		;CLEAR BAT ENTRY
  0230   0640           	DECT	R0		;FINISHED ?
  0232   16FD           	JNE	IBAT4
  0234   0711           	SETO	*R1		;LAST LINK IS -1
  0236   0203 0000      	LI	R3,BATTRK		;SEEK BAT TRACK
  023A   2DA0 E618      	CALL	@SEEK		;GO SEEK
  023E   0204 C788      	LI	R4,IOBUF
  0242   0203 0004      	LI	R3,BATSEC + 2
  0246   2DA0 E620      	CALL	@WRREC	
  024A   2DC0           	RET
                        ;
                        ;--INITIALISE DIRECTORY SECTORS
                        ;
  024C   0200 E5E5      INITDIR	LI	R0,0E5E5H		;NULL ENTRY BYTE
  0250   0201 C788      	LI	R1,IOBUF
  0254   0202 0200      	LI	R2,BYTSEC
  0258   CC40           IDIR1	MOV	R0,*R1+		;FILL BUFFER
  025A   0642           	DECT	R2
  025C   16FD           	JNE	IDIR1
  025E   0203 0000      	LI	R3,DIRTRK		;SEEK DIRECTORY TRACK
  0262   2DA0 E618      	CALL	@SEEK
  0266   0203 0005      	LI	R3,FDIRSEC		;FIRST DIRECTORY SECTOR
  026A   C803 C722      	MOV	R3,@CDSEC
  026E   0204 C788      IDIR2	LI	R4,IOBUF
  0272   C0E0 C722      	MOV	@CDSEC,R3		;GET NEXT DIRECTORY SECTOR
  0276   0223 FFFB      	AI	R3,-FDIRSEC		
  027A   0283 0004      	CI	R3,NDIRSEC		;FINISHED ?
  027E   1307           	JEQ	IDIR3	
  0280   C0E0 C722      	MOV	@CDSEC,R3
  0284   2DA0 E620      	CALL	@WRREC		;WRITE OUT FIRST DIRECTORY BLOCKS
  0288   05A0 C722      	INC	@CDSEC		;GO TO NEXT SECTOR
  028C   10F0           	JMP	IDIR2
  028E   2DC0           IDIR3	RET
                        ;
                        ;---INITIALISE SYSTEM FILES
                        ;
  0290   0208 C788      INITSYS	LI	R8,IOBUF		;FCB ADDRESS
  0294   0203 0102      	LI	R3,SHELL
  0298   0200 0040      	LI	R0,32*2		;FCB SIZE - JUST INIT SHELL and DOS
  029C   C048           	MOV	R8,R1		;FCB ADDRESS
  029E   DC73           INTSYS2	MOVB	*R3+,*R1+		;TRANSFER DIRECTOR ENTRIES
  02A0   0600           	DEC	R0
  02A2   16FD           	JNE	INTSYS2
  02A4   0203 0000      	LI	R3,DIRTRK		;SEEK DIRECTORY TRACK
  02A8   2DA0 E618      	CALL	@SEEK
  02AC   0203 0005      	LI	R3,FDIRSEC		;FIRST DIRECTORY SECTOR
  02B0   C108           	MOV	R8,R4		;DIRECTORY ENTRY ADDRESS
  02B2   2DA0 E620      	CALL	@WRREC
                        ;
                        ;--NOW WRITE OUT THE SYSTEM FILES
                        ;
  02B6   0208 C788      	LI	R8,IOBUF		;BEGIN WITH SHELL
  02BA   2DA0 02C8      	CALL	@WRTSYS
  02BE   0228 0020      	AI	R8,32		;NOW BDOS
  02C2   2DA0 02C8      	CALL	@WRTSYS
  02C6   2DC0           	RET			;ALL DONE
                        ;
                        ;--WRITE EACH SYSTEM FILE WHOSE FCB IS R8
                        ;
  02C8   C0E8 001A      WRTSYS 	MOV	@CRN(R8),R3		;BEGIN AT FIRST RECORD
  02CC   C068 000C      	MOV	@FSB(R8),R1		;GET BAT INDEX			
  02D0   2DA0 C6AA      	CALL	@TSCONV		;CONVERT R2=TRACK,R3=SECTOR
  02D4   2E03           	PUSH	R3		;SAVE SECTOR
  02D6   C0C2           	MOV	R2,R3
  02D8   2DA0 E618      	CALL	@SEEK		;SEEK THE TRACK
  02DC   2E43           	POP	R3		;POP THE SECTOR
  02DE   C128 0010      	MOV	@FLA(R8),R4		;LOAD ADDRESS			
  02E2   2DA0 E620      	CALL	@WRREC		;READ IN A SECTOR
  02E6   0200 0200      	LI	R0,BYTSEC
  02EA   AA00 0010      	A	R0,@FLA(R8)		;INCREMENT LOAD ADDRESS POINTER
  02EE   05A8 001A      	INC	@CRN(R8)
  02F2   0628 000E      	DEC	@FSZ(R8)		;FINISHED ?
  02F6   16E8           	JNE	WRTSYS		;NO
  02F8   2DC0           	RET
                        ;
                        ;
                        ;WAIT FOR PERIOD IN R0
                        ;
  02FA   0600           WAIT	DEC	R0
  02FC   1304           	JEQ	WAIT1
  02FE   0701           	SETO	R1
  0300   0601           WAIT2	DEC	R1
  0302   16FE           	JNE	WAIT2
  0304   10FA           	JMP	WAIT
  0306   2DC0           WAIT1	RET
                        ;
                        ;
                        ;--------------------------------------------------------------------
                        ;
                        ;	LOADER MODULE
                        ;
                        ;	THIS MODULE WILL BE LOADED IN THE DISK BOOT SECTOR
                        ;	AND WILL BE EXECUTED BY THE COLD BOOT MODULE WITHIN
                        ;	THE MONITOR.  THE LOADER MODULE IS RESPONSIBLE FOR 
                        ;	SEARCHING FOR, AND LOADING SHELL.SYS, BDOS.SYS AND BIOS.SYS.
                        ;
                        ;	IT ASSUMES THAT MONITOR HAS BEEN CALLED AN INITIALISED
                        ;
                        ;	MODULE CANNOT BE LARGER THAT 512 BYTES
                        ;
                        ;-------------------------------------------------------------------
  C600                  	AORG	0C600H
                        ;
                        ;	MUST USE OUR OWN WORKSPACE AND STACK AS
                        ;	MONITOR WORKSPACE IS UNIQUE AND CANNOT BE SHARED
                        ;
  C600   02E0 C726      LOADER	LWPI	WORKSP
  C604   020A C786      	LI	SP,STACKP
                        ;	LI	SL,STACKL
                        	;
                        	; OKAY WE CAN NOW INTIALISE MONITOR AND CALL THE SHELL
                        	;
  C608   0202 0000      	LI	R2,0
  C60C   2DA0 E610      	CALL	@SELDSK
  C610   2DA0 E614      	CALL	@RECAL
  C614   0203 0000      	LI	R3,DIRTRK		;SEEK DIRECTORY TRACK
  C618   2DA0 E618      	CALL	@SEEK
  C61C   C041           	MOV	R1,R1
  C61E   1159           	JLT	LOADERR
  C620   0203 0005      	LI	R3,FDIRSEC		;FIRST DIRECTORY SECTOR
  C624   0204 C788      	LI	R4,IOBUF
  C628   2DA0 E61C      	CALL	@RDREC			;READ IN THE DIRECTORY
  C62C   1152           	JLT	LOADERR	
                        
                        ;
                        ;--LOOK FOR THE SYSTEM FILES
                        ;
  C62E   0208 C788      DLOOK	LI	R8,IOBUF		;SHELL SYSTEM FIRST
  C632   0204 C6DA      	LI	R4,SHELLSYS		;NAME OF SYSTEM FILES
  C636   2DA0 C694      	CALL	@MATCH
  C63A   114B           	JLT	LOADERR
  C63C   2DA0 C656      	CALL	@LOADSYS		;LOAD SHELL SYSTEM
  C640   0204 C6E5      	LI	R4,BDOSSYS		;LOOK FOR BDOS FILE
  C644   0228 0020      	AI	R8,32			;POINT TO NEXT DIRECTORY ENTRY	
  C648   2DA0 C694      	CALL	@MATCH
  C64C   1142           	JLT	LOADERR
  C64E   2DA0 C656      	CALL	@LOADSYS		;LOAD BDOS SYSTEM
  C652   0460 CA00      	B	@ENTSHELL		;INITAILISE INTERRUPT VECTORS ETC AND GO TO SHELL ENTRY RATHER THAN VECTOR
                        	
                        ;
                        ;--LOAD SYSTEM FILE
                        ;
                        ;  R8 -> FCB
                        ;
  C656   04E8 001A      LOADSYS	CLR	@CRN(R8)
  C65A   C0E8 001A      LOAD1	MOV	@CRN(R8),R3		;BEGIN AT FIRST RECORD	
  C65E   C068 000C      	MOV	@FSB(R8),R1		;GET BAT INDEX			
  C662   2DA0 C6AA      	CALL	@TSCONV			;CONVERT R2=TRACK,R3=SECTOR
  C666   2E03           	PUSH	R3			;SAVE SECTOR
  C668   C0C2           	MOV	R2,R3
  C66A   2DA0 E618      	CALL	@SEEK			;SEEK THE TRACK
  C66E   2E43           	POP	R3
  C670   1630           	JNE	LOADERR			;R1 SET IN SEEK
  C672   C128 0010      	MOV	@FLA(R8),R4		;LOAD ADDRESS			
  C676   2DA0 E61C      	CALL	@RDREC			;READ IN A SECTOR
  C67A   C041           	MOV	R1,R1
  C67C   112A           	JLT	LOADERR
  C67E   05A8 001A      	INC	@CRN(R8)		;UP RECORD COUNT
  C682   0200 0200      	LI	R0,BYTSEC
  C686   AA00 0010      	A	R0,@FLA(R8)		;INCREMENT LOAD ADDRESS POINTER
  C68A   8A28 001A      	C	@CRN(R8),@FSZ(R8)	;FINISHED ?
  C68E   000E           
  C690   16E4           	JNE	LOAD1			;No
  C692   2DC0           	RET
                        
                        ;
                        ;--MATCH A DIRECTORY ENTRY
                        ;	R4->NAME TO MATCH
                        ;	R8->DIRECTORY ENTRY
                        ;
  C694   C0C8           MATCH	MOV	R8,R3
  C696   0701           	SETO	R1			;ERROR FLAG
  C698   0200 000B      	LI	R0,NAMSIZ 		;NUMBER OF CHARS TO MATCH
  C69C   9CF4           MATCH1	CB	*R4+,*R3+		;CHECK FOR SYSTEM FILES
  C69E   1603           	JNE	MATCH2			;MATCH ERROR
  C6A0   0600           	DEC	R0	
  C6A2   16FC           	JNE	MATCH1	 		;CONTINUE
  C6A4   04C1           	CLR	R1
  C6A6   C041           MATCH2	MOV	R1,R1
  C6A8   2DC0           	RET
                        ;
                        ;
                        ;------------------------------------------------------------------------
                        ;
                        ;	BLOCK TO TRACK SECTOR CONVERSION
                        ;	CONVER NEXT RECORD IN FILE TO TRACK SECTOR
                        ;
                        ;	R1 = CURRENT BLOCK
                        ;	R3 = CURRENT RECORD WITHIN FILE TO READ
                        ;
                        ;	RETURN WITH R2=TRACK,R3=SECTOR
                        ;
                        ;	TRK = INT((BLK*SECBLK + R3)/SECTRK)
                        ;	SECT = REMAINDER(BLK...)+1		
                        ;
                        ;------------------------------------------------------------------------
                        ;
  C6AA   04C2           TSCONV	CLR	R2
  C6AC   0200 0004      	LI	R0,SECBLK
  C6B0   3C80           	DIV	R0,R2			; THIS OFFSETS FROM THE FSB IE HOW MANY BLOCKS IN THE GIVEN CRN
  C6B2   A042           	A	R2,R1			;R1=BLOCK,R3=OFFSET WITHIN BLOCK
                        ;
                        ;
                        ;NOW GET TRACK AND SECTOR
                        ;REVISED MULTIPLY TO AVOID 99105 MULTIPLY BUG
                        ;
  0000                  MPY	EQU	0
  0001                  MCND	EQU	1
  0002                  PROD	EQU	2
  0000                  CNT	EQU	0
                        
  C6B4   0200 0004      	LI	MPY,SECBLK
  C6B8   04C2           	CLR	PROD
  C6BA   C000           	MOV	MPY,CNT
  C6BC   1303           	JEQ	BTTSC2
  C6BE   A081           BTTSC1	A	MCND,PROD		;R2=BLK*SECBLK 
  C6C0   0600           	DEC	CNT
  C6C2   16FD           	JNE	BTTSC1
  C6C4   A0C2           BTTSC2	A	R2,R3			;R3=BLK*SECBLK+R3
  C6C6   04C2           	CLR	R2			;MSB OF QUOTIENT
  C6C8   0200 0012      	LI	R0,SECTRK	 	;SECTORS/TRACK
  C6CC   3C80           	DIV	R0,R2	 		;R2=TRK,R3=SECT (R2+R3)/R0
  C6CE   0583           	INC	R3			;TAKES CARE OF ZERO OFFSET FOR CRN
  C6D0   2DC0           BTTSC0	RET
                        ;
                        ;
  C6D2   2FA0 C6FB      LOADERR MESG	@LDMSG
  C6D6   0460 F000      	B	@DEBUG
                        ;
                        ;--SYSTEM FILE NAMES
                        ;
  C6DA   5348 454C      SHELLSYS TEXT	'SHELL   SYS'
  C6DE   4C20 2020      
  C6E2   5359 53        
                        ;
  C6E5   4244 4F53      BDOSSYS	TEXT	'BDOS    SYS'
  C6E9   2020 2020      
  C6ED   5359 53        
                        ;
  C6F0   5341 5645      SAVEEXE	TEXT	'SAVE    EXE'   ;SAVE IS NOW PART OF THE SHELL
  C6F4   2020 2020      
  C6F8   4558 45        
                        ;
                        
                        ;
                        ;--LOADER MESSAGES
                        ;
  C6FB   0D0A           LDMSG	BYTE	0DH,0AH,
  C6FD   4361 6E27      	TEXT 	"Can't boot - no system files..."
  C701   7420 626F      
  C705   6F74 202D      
  C709   206E 6F20      
  C70D   7379 7374      
  C711   656D 2066      
  C715   696C 6573      
  C719   2E2E 2E        
  C71C   0D0A 00        	BYTE	0DH,0AH,00
  C71F   00             	EVEN
                        ;
                        ;---------END OF LOAD MODULE----SIZE < 512 BYTES -------------
                        ;
                        ;  BUFFER AND WORKSPACES REGIONS
                        ;
  C720   0000           NAMPTR	WORD	0
  C722   0000           CDSEC	WORD	0			;CURRENT DIRECTORY SECTOR
  C724   0000           BUFPTR	WORD	0
  C726                  WORKSP	BSS	32
  C746                  STACKL	BSS	64
  C786   0000           STACKP  WORD	0
  C788                  IOBUF	BSS	512
                        
                        ;
  C988                  	END

No error(s).
IZ                      f$G            1                 V                        f                      b      X  Z                         ZFFLA 4             022E    SHELL             0102    SECDSK            0B40    1           WBOOT             E628    INITBOOT          01C8    EXIT              01C4    BTTSC2            C6C4
BTTSC1            C6BE    IDIR2             026E    LOADERR           C6D2    BATINT            0182
WRTSYS            02C8    R13               000D
