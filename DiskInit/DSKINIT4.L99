                        ;
                        ;****************************************
                        ;
                        ;	DISK INITIALISER
                        ;
                        ;	THIS PROGRAMME WILL INITIALISE THE BAT ETC
                        ;	VERSION 3 FOR IDE FIXED DISC INTERFACE
                        ;	VERSION 4 COMPATIBLE WITH MODULE LOAD SECTOR, BUT NO CHANGE TO ACTUAL CODE
                        ;	          VERSION REFLECTS THAT THIS IS PART OF THE 4 BASELINE.
                        ;
                        ;**************************************
                        ;
                        ;
  0000                  R0	EQU	0
  0001                  R1	EQU	1
  0002                  R2	EQU	2
  0003                  R3	EQU	3
  0004                  R4	EQU	4
  0005                  R5	EQU	5
  0006                  R6	EQU	6
  0007                  R7	EQU	7
  0008                  R8	EQU	8
  0009                  SL	EQU	9
  000A                  SP	EQU	10
  000B                  R11	EQU	11
  000C                  PORT	EQU	12
  000C                  R12	EQU	12
  000D                  R13	EQU	13
  000E                  R14	EQU	14
  000F                  R15	EQU	15
                        ;
                        ;	DEFINE SOME XOP'S
                        ;
                        	DXOP	CALL,6
                        	DXOP	RET,7
                        	DXOP	PUSH,8
                        	DXOP	POP,9
                        	DXOP	WHEX,10
                        	DXOP	WRITE,12			;WRITE CHAR IN MSB
                        	DXOP	READ,13			;READ CHAR IN MSB
                        	DXOP	MESG,14			;OUTPUT NULL TERMINATED MESSAGE
                        	DXOP	DEBUG,15		;DEBUG CURRENT LOCATION & STORE INTO DEBUG_BUFFER
                        ;
                        ;  OPERATING SYSTEM EQUATES
                        ;
  F000                  MONITOR	EQU	0F000H
  C300                  SHELL_ADDR	EQU	0C300H
                        
  0500                  	AORG	0500H
  0500   1028           	JMP	START
                        
                        ;
                        ;---FCB ENTRY EQUATES
                        ;
  0010                  FLA	EQU	16			;LOAD ADDRESS	
  001A                  CRN	EQU	26			;NEXT RECORD TO READ
  000C                  FSB	EQU	12			;TWO BYTES HOLD TRACK AND SECTOR
  000E                  FSZ	EQU	14			;NUMBER OF SECTORS TO LOAD
                        ;
                        ;NOTE THERE ARE NOW 12 SECTORS PER BLOCK
                        ;SO SECTOR 2 IS THE FIRST BLOCK AFTER THE BOOT SECTOR
                        ;
                        ;SO WORD BELOW IS INTERPRETED AS
                        ; FSB, FSZ AND FLA
                        ;
                        
                        ;
                        ;--SYSTEM DIRECTORY ENTRY BLOCKS.   THESE FILE DO NOT NEED A MODULE LOCATION INDEX TABLE
                        ;
                        ;
  0502   5348 454C      SHELLSYS	TEXT	'SHELL   SYS'
  0506   4C20 2020      
  050A   5359 53        
  050D   00             	BYTE	0			;FILE TYPE
  050E   0002 0007      	WORD	2,7,0C300H,0,0,0,0,0,0,0	;FSB,FSZ,FLA  4 SECT PER BLOCK MEANS 2 BATS IF 5
  0512   C300 0000      
  0516   0000 0000      
  051A   0000 0000      
  051E   0000 0000      
                        ;
  0522   4244 4F53      BDOSSYS	TEXT	'BDOS    SYS'
  0526   2020 2020      
  052A   5359 53        
  052D   00             	BYTE	0
  052E   0004 0007      	WORD	4,7,0D100H,0,0,0,0,0,0,0 	;TWO BAT ENTERIES
  0532   D100 0000      
  0536   0000 0000      
  053A   0000 0000      
  053E   0000 0000      
                        ;
                        ;SAVE	TEXT	'SAVE    EXE'		;NOTE, DON'T LOAD SAVE
                        ;	BYTE	2			;TYPE 2 IS EXECUTABLE
                        ;	WORD	6,2,0100H,0,0,0,0,0,0,0 	;SAVE COMMAND ONE BAT ENTERY
                        
                        ;DIR	TEXT	'DIR     EXE'		;NOTE, DON'T LOAD SAVE
                        ;	BYTE	2			;TYPE 2 IS EXECUTABLE
                        ;	WORD	7,2,0C400H,0,0,0,0,0,0,0 	;SAVE COMMAND ONE BAT ENTERY
                        
                        ;
                        ;BAT INITIALISER 
                        ;
  0542   FF80 FF80      BATINT	WORD	0FF80H,0FF80H		;RESERVERD FOR BOOT,BAT AND DIRECTORY ENTRIES + FUTURE
  0546   0002 FF80      	WORD	2,0FF80H		;SHELL [BLOCKS 2 AND 3]
  054A   0004 FF80      	WORD	4,0FF80H		;BDOS [BLOCKS 4 AND 5]
                        ;	WORD	0FFF8H		;SAVE [BLOCK 6]
  054E   0000           	WORD	0		;END OF TABLE
                        
  0550   000A           RETRY	WORD	10		;RETRIES
                        ;
                        ; MONITOR AND SHELL EQUATES - THESE ARE ONLY USED BY LOADER
                        ;
                        ;WBOOT	EQU	MONITOR+10*4		;WARM BOOT
                        ;SELDSK	EQU	MONITOR+4*4		;SELECT A DISK
                        ;RECAL	EQU	MONITOR+5*4		;HOME THE DRIVE USED BY LOADER
                        ;SEEK	EQU	MONITOR+6*4		;SEEK A TRACK - USED BY LOADER
                        ;RDREC	EQU	MONITOR+7*4		;READ A SECTOR  USED BY LOADER
                        ;WRREC	EQU	MONITOR+8*4		;WRITE A SECTOR
                        ;RDID	EQU	MONITOR+9*4
                        ;
  0200                  BYTSEC	EQU	512			;BYTES PER SECTOR
  0004                  SECBLK	EQU	4			;SECTOR PER BLOCK
                        ;
                        ;
                        ;BATTRK	EQU	0			;START TRACK
                        ;DIRTRK	EQU	0			;DIRECTORY STARTS HERE
                        ;
                        ; DEFINE LBA VALUES FOR DISK INIT
                        ;
                        
  0000                  BOOT_LBA	EQU	0
  0002                  BAT_LBA	EQU	2
  0008                  DIR_LBA	EQU	8
  0010                  FINAL_LBA	EQU	16
  0012                  BLK2_LBA	EQU	18		; LBA = BLOCK_NUM* 4 * 2  FILES START AT BLOCK 2
                        				;AND THERE ARE 4 SECTORS PER BLOCK, AND 2 LBAS PER SECTOR
  0004                  NDIRSEC	EQU	4			;NUMBER OF DIRECTORY SECTORS
  000B                  NAMSIZ	EQU	11			;DIRECTORY NAME SIZE
                        ;
                        ;
                        ;
                        ;	AS WE ARE USING LOCAL WORKSPACE
                        ;
  0552                  	EVEN
  0552   02E0 BD06      START	LWPI	WORKSP		;USE LOCAL WORKSPACE
  0556   020A BD34      	LI	SP,STACKP
                        ;	LI	SL,STACKL
  055A   2DA0 BB90      	CALL	@IDE_READY
  055E   2DA0 0598      	CALL	@INITBOOT		;INITIALISE BOOT SECTOR
  0562   2DA0 05A6      	CALL	@INITBAT		;INITIALISE BAT
  0566   2DA0 0600      	CALL	@INITDIR		;INITIALISE DIRECTORY
  056A   2DA0 062A      	CALL	@INITSYS		;INITIALISE SYSTEM FILES
  056E   2FA0 0588      	MESG	@SUCCESS
  0572   0420 F000      	BLWP	@MONITOR		;RETURN TO MONITOR ENTRY
                        	;
  0576   C0E0 BF3A      COPY2IMAGE	MOV	@IMAGEPTR,R3
  057A   2DA0 BBDA      	CALL	@READ_SECTOR
  057E   0223 0200      	AI	R3,BYTSEC
  0582   C803 BF3A      	MOV	R3,@IMAGEPTR
  0586   2DC0           	RET
  0588   0D0A           SUCCESS:	BYTE	0DH,0AH
  058A   5355 4343      	TEXT	"SUCCESS..."
  058E   4553 532E      
  0592   2E2E           
  0594   0D0A 00        	BYTE	0DH,0AH,0
  0597   00             	EVEN
                        ;
                        ;RETURN TO MONITOR ENTRY
                        ;
                        ;--INITIALISE THE BOOT SECTOR.  PASS THE ADDRESS OF THE LOADER IN R3, LBA IN R5
                        ;
  0598   0203 BB00      INITBOOT	LI	R3,LOADER		;ADDRESS OF LOADER MODULE
  059C   0205 0000      	LI	R5,BOOT_LBA		;BOOT LBA
  05A0   2DA0 BBFC      	CALL	@WRITE_SECTOR		;WRITE OUT THE LOADER
  05A4   2DC0           	RET		
                        ;
                        ;
                        ;INITIALISE THE BAT
                        ;
                        ;
  05A6   0201 BD36      INITBAT	LI	R1,IOBUF
  05AA   0200 0200      	LI	R0,BYTSEC		;FLUSH BUFFER
  05AE   04F1           IBAT1	CLR	*R1+		;CLEAR BAT ENTRY
  05B0   0640           	DECT	R0		;FINISHED ?
  05B2   16FD           	JNE	IBAT1
                        ;
                        ;--BAT INITIALISER TABLE TRANSFERRED
                        ;
  05B4   0200 0542      	LI	R0,BATINT		;BAT ALLOCATION TABLE
  05B8   0201 BD36      	LI	R1,IOBUF
  05BC   CC70           IBAT2	MOV	*R0+,*R1+		;ZERO INDICATES END OF TABLE
  05BE   16FE           	JNE	IBAT2	
  05C0   0205 0002      	LI	R5,BAT_LBA 		;GO TO NEXT LBA (REMEMBER INCREMENTS OF 2)
  05C4   0203 BD36      	LI	R3,IOBUF
  05C8   2DA0 BBFC      	CALL	@WRITE_SECTOR		;WRITE OUT THE BUFFER
                        
                        ;
                        ;	NEXT BAT SECTOR
                        ;
  05CC   0201 BD36      	LI	R1,IOBUF
  05D0   0200 0200      	LI	R0,BYTSEC		;INDEX TO LAST ENTRY
  05D4   04F1           IBAT3	CLR	*R1+		;CLEAR BAT ENTRY
  05D6   0640           	DECT	R0		;FINISHED ?
  05D8   16FD           	JNE	IBAT3
  05DA   05C5           	INCT	R5		; R5 SHOULD BE UNTOUCHED SO INCREMENT BY 2 FOR NEXT LBA
  05DC   0203 BD36      	LI	R3,IOBUF
  05E0   2DA0 BBFC      	CALL	@WRITE_SECTOR		;WRITE OUT THE BUFFER
                        ;
                        ; 	LAST BAT SECTOR
                        ;
  05E4   0201 BD36      	LI	R1,IOBUF
  05E8   0200 00D0      	LI	R0,720-512 		;LAST BAT ENTRY
  05EC   04F1           IBAT4	CLR	*R1+		;CLEAR BAT ENTRY
  05EE   0640           	DECT	R0		;FINISHED ?
  05F0   16FD           	JNE	IBAT4
  05F2   0711           	SETO	*R1		;LAST LINK IS -1
  05F4   05C5           	INCT	R5		;SEEK LAST LBA BAT
  05F6   0203 BD36      	LI	R3,IOBUF
  05FA   2DA0 BBFC      	CALL	@WRITE_SECTOR
  05FE   2DC0           	RET
                        ;
                        ;--INITIALISE DIRECTORY SECTORS
                        ;
  0600   0200 E5E5      INITDIR	LI	R0,0E5E5H		;NULL ENTRY BYTE
  0604   0201 BD36      	LI	R1,IOBUF
  0608   0202 0200      	LI	R2,BYTSEC
  060C   CC40           IDIR1	MOV	R0,*R1+		;FILL BUFFER
  060E   0642           	DECT	R2
  0610   16FD           	JNE	IDIR1
  0612   04C4           	CLR	R4
  0614   0205 0008      	LI	R5,DIR_LBA
                        ;
  0618   0203 BD36      IDIR2	LI	R3,IOBUF
  061C   2DA0 BBFC      	CALL	@WRITE_SECTOR		;WRITE OUT FIRST DIRECTORY BLOCKS
  0620   05C5           	INCT	R5		;GO TO NEXT LBA/SECTOR
  0622   0285 0010      	CI	R5,FINAL_LBA
  0626   12F8           	JLE	IDIR2
  0628   2DC0           IDIR3	RET
                        ;
                        ;---INITIALISE SYSTEM FILES
                        ;
  062A   0208 BD36      INITSYS	LI	R8,IOBUF		;FCB ADDRESS
  062E   0203 0502      	LI	R3,SHELLSYS
  0632   0200 0040      	LI	R0,32*2		;FCB SIZE - JUST INIT SHELL and DOS
  0636   C048           	MOV	R8,R1		;FCB ADDRESS
  0638   DC73           INTSYS2	MOVB	*R3+,*R1+		;TRANSFER DIRECTOR ENTRIES
  063A   0600           	DEC	R0
  063C   16FD           	JNE	INTSYS2
  063E   04C4           	CLR	R4
  0640   0205 0008      	LI	R5,DIR_LBA		;FIRST DIRECTORY
  0644   C0C8           	MOV	R8,R3		;DIRECTORY ENTRY ADDRESS
  0646   2DA0 BBFC      	CALL	@WRITE_SECTOR
                        ;
                        ;--NOW WRITE THE SYSTEM FILES THAT ARE IN MEMORY TO DISC
                        ;
  064A   0208 BD36      	LI	R8,IOBUF		;BEGIN WITH SHELL
  064E   04C4           	CLR	R4
  0650   0205 0012      	LI	R5,BLK2_LBA		;BLOCK 2 IS WHERE FILES BEGIN
  0654   2DA0 0662      	CALL	@WRTSYS
  0658   0228 0020      	AI	R8,32		;Use DIR Offset to now point to BDOS
  065C   2DA0 0662      	CALL	@WRTSYS
  0660   2DC0           	RET			;ALL DONE
                        ;
                        ;--WRITE EACH SYSTEM FILE WHOSE FCB ADDRESS IS IN R8
                        ;
  0662   04E8 001A      WRTSYS:	CLR	@CRN(R8)
  0666   C0E8 001A      WRTSYS1	MOV	@CRN(R8),R3		;GET CURRENT RECORD NUMBER (SECTOR)
  066A   C168 000C      	MOV	@FSB(R8),R5		;GET FIRST BLOCK NUMBER NUMBER
  066E   0A35           	SLA	R5,3		;MULTIPLY BY 8, BLOCK_NUM * 2 * 4 TO GET LBA
  0670   0A13           	SLA	R3,1		;MULTIPLY BY 2 FOR TWO LBA RECORDS PER SECTOR (8 BIT ISSUE)
  0672   A143           	A	R3,R5		;WE NOW HAVE THE LBA TO WRITE TO
  0674   C0E8 0010      	MOV	@FLA(R8),R3		;LOAD ADDRESS
  0678   2DA0 BBFC      	CALL	@WRITE_SECTOR		;READ IN A SECTOR
  067C   0200 0200      	LI	R0,BYTSEC
  0680   AA00 0010      	A	R0,@FLA(R8)		;INCREMENT LOAD ADDRESS POINTER
  0684   05A8 001A      	INC	@CRN(R8)
  0688   0628 000E      	DEC	@FSZ(R8)		;FINISHED ?
  068C   16EC           	JNE	WRTSYS1		;NO
  068E   2DC0           	RET
                        ;
                        ;--------------------------------------------------------------------
                        ;
                        ;	LOADER MODULE - IT IS LOCATED AT THE FIXED MEMO LOCATION OF 1000H
                        ;
                        ;	THIS MODULE WILL BE LOADED IN THE DISK BOOT SECTOR
                        ;	AND WILL BE EXECUTED BY THE COLD BOOT MODULE WITHIN
                        ;	THE MONITOR.  THE LOADER MODULE IS RESPONSIBLE FOR 
                        ;	SEARCHING FOR, AND LOADING SHELL.SYS, BDOS.SYS AND BIOS.SYS.
                        ;
                        ;	IT ASSUMES THAT MONITOR HAS BEEN CALLED AN INITIALISED AND IS
                        ;	CALLED FROM THE MONITOR AND WILL USE MONITOR'S WORKSPACE
                        ;
                        ;	MODULE CANNOT BE LARGER THAT 512 BYTES SO WE MUST USE MONITOR DISC ROUTINES
                        ;
                        ;-------------------------------------------------------------------
  BB00                  	AORG	SHELL_ADDR - 2048	;LOCATE LOADER JUST ABOVE THE SEHLL
  BB00   02E0 BD06      LOADER:	LWPI	WORKSP
  BB04   020A BD34      	LI	SP,STACKP
  BB08   2DA0 BB90      	CALL	@IDE_READY
  BB0C   0205 0008       	LI	R5,DIR_LBA		;SEEK DIRECTORY TRACK USING LBA VALUE
  BB10   0203 BD36      	LI	R3,IOBUF
  BB14   2DA0 BBDA      	CALL	@READ_SECTOR		;READ IN THE DIRECTORY THROUGH MONITOR
  BB18   1137           	JLT	LOADERR	
                        ;
                        ;--LOOK FOR THE SYSTEM FILES, FIRST SHELL.
                        ;
                        
  BB1A   0208 BD36      	LI	R8,IOBUF		;SHELL SYSTEM FIRST
  BB1E   0204 BCB6      	LI	R4,SHELL		;NAME OF SYSTEM FILES
  BB22   2DA0 BB72      	CALL	@MATCH
  BB26   1630           	JNE	LOADERR
  BB28   2DA0 BB42      	CALL	@LOADSYS		;LOAD SHELL SYSTEM
                        ;
                        ;	NOW LOAD BDOS
                        ;
  BB2C   0228 0020      	AI	R8,32		;NEXT DIRECTORY ENTRY
  BB30   0204 BCC1      	LI	R4,BDOS		;NAME OF SYSTEM FILES
  BB34   2DA0 BB72      	CALL	@MATCH
  BB38   1627           	JNE	LOADERR
  BB3A   2DA0 BB42      	CALL	@LOADSYS		;LOAD BDOS SYSTEM
  BB3E   0460 C300      	B	@SHELL_ADDR		;INITAILISE INTERRUPT VECTORS ETC AND GO TO SHELL ENTRY RATHER THAN VECTOR
                        	
                        ;
                        ;--LOAD SYSTEM FILE
                        ;
                        ;  R8 -> FCB
                        ;
  BB42   04E8 001A      LOADSYS:	CLR	@CRN(R8)
  BB46   C0E8 001A      LOAD1	MOV	@CRN(R8),R3		;BEGIN AT FIRST RECORD	
  BB4A   C168 000C      	MOV	@FSB(R8),R5		;GET FILE STARTING BLOCK INDEX
  BB4E   0A35           	SLA	R5,3		;WE HAVE RELATIVE LBA NOW
  BB50   0A13           	SLA	R3,1		;2 LBA RECORDS PER SECTOR 8 BIT ISSUE
  BB52   A143           	A	R3,R5		;NOW HAVE LBA
  BB54   C0E8 0010      	MOV	@FLA(R8),R3		;LOAD ADDRESS
  BB58   2DA0 BBDA      	CALL	@READ_SECTOR		;READ IN A SECTOR IN R3
  BB5C   1615           	JNE	LOADERR
  BB5E   05A8 001A      	INC	@CRN(R8)		;UP RECORD COUNT
  BB62   0200 0200      	LI	R0,BYTSEC
  BB66   AA00 0010      	A	R0,@FLA(R8)		;INCREMENT LOAD ADDRESS POINTER
  BB6A   0628 000E      	DEC	@FSZ(R8)		;FINISHED ?
  BB6E   16EB           	JNE	LOAD1		;No
  BB70   2DC0           	RET
                        ;
                        ;--MATCH A DIRECTORY ENTRY
                        ;	R4->NAME TO MATCH
                        ;	R8->DIRECTORY ENTRY
                        ;
  BB72   C0C8           MATCH	MOV	R8,R3
  BB74   0701           	SETO	R1		;ERROR FLAG
  BB76   0200 000B      	LI	R0,NAMSIZ 		;NUMBER OF CHARS TO MATCH
  BB7A   9CF4           MATCH1	CB	*R4+,*R3+		;CHECK FOR SYSTEM FILES
  BB7C   1603           	JNE	MATCH2		;MATCH ERROR
  BB7E   0600           	DEC	R0	
  BB80   16FC           	JNE	MATCH1	 	;CONTINUE
  BB82   04C1           	CLR	R1
  BB84   C041           MATCH2	MOV	R1,R1		;SET STATUS FLAGS
  BB86   2DC0           	RET
                        
  BB88   2FA0 BCCC      LOADERR 	MESG	@LDMSG
  BB8C   0420 F000      	BLWP	@MONITOR
                        ;
                        ;=========START OF IDE INTERFACE ROUTINES====================
                        ;
                        ;
                        ; IDE REGISTERS - REFERENCE SEE THE SEAGATE REFERENCE MANUAL
                        ;
  8040                  IDE_BASE_PORT:	EQU	8040H	;PARALLEL OUTPUT ADDRESS WITH MSB SET THIS IS CS0
  0002                  BYTEWIDE:	EQU	2
                        ;
  804E                  IDE_COMMAND:	EQU	IDE_BASE_PORT+7*2
  804E                  IDE_STATUS:	EQU	IDE_BASE_PORT+7*2
  804C                  IDE_CONTROL:	EQU	IDE_BASE_PORT+6*2
  8040                  IDE_DATA:	EQU	IDE_BASE_PORT
  804C                  IDE_HEAD:	EQU	IDE_BASE_PORT + 6*2
  8048                  IDE_CYL_LSB:	EQU	IDE_BASE_PORT + 4*2
  804A                  IDE_CYL_MSB:	EQU	IDE_BASE_PORT + 5*2
  8046                  IDE_SECTOR:	EQU	IDE_BASE_PORT + 3*2
  8044                  IDE_SEC_CNT:	EQU	IDE_BASE_PORT + 2*2
  8042                  IDE_ERROR:	EQU	IDE_BASE_PORT + 1*2
                        ;
                        ; IDE STATUS REGISTER AND BIT DEFINTIONS
                        ;
  0080                  IDE_BSY:	EQU	10000000B		;80H
  0040                  IDE_DRDY:	EQU	01000000B		;40H
  0001                  IDE_ERR:	EQU	00000001B		;01H
  0020                  IDE_DWF:	EQU	00100000B		;20H  DRIVE WRITE FAULT
  0010                  IDE_DSC:	EQU	00010000B		;01H  DRIVE SEEK COMPLETE
  0010                  IDE_DRQ:	EQU	000010000B		;01H  DATA REQUEST BIT
                        ;
                        ; IDE COMMANDS - NOTE COMMAND IS IN THE MOST SIGNIFICANT BYTE
                        ;
  2000                  IDE_CMD_READ:	EQU	02000H
  3000                  IDE_CMD_WRITE:	EQU	03000H	;R = 0 FOR NO RETRY
  1000                  IDE_CMD_RECAL:	EQU	01000H	;R = 0 FOR NO RETRY
  9100                  IDE_CMD_INIT:	EQU	09100H
  EC00                  IDE_CMD_ID:	EQU	0EC00H	;GET THE DRIVE PROPERTIES
  E000                  IDE_CMD_SDOWN:	EQU	0E000H	;R = 0 FOR NO RETRY
  E100                  IDE_CMD_SUP:	EQU	0E100H	;R = 0 FOR NO RETRY
                        
                        ;
                        ; CHECK THE IDE READY BIT.
                        ;
  BB90   020C 804C      IDE_READY:	LI	PORT, IDE_HEAD		;DEVICE HEAD REGISTER
  BB94   0201 E000      	LI	R1, 11100000B*256	;SPECIFY LBA MODE
  BB98   3081           	LDCR	R1,BYTEWIDE		;WRITE THE COMMAND
                        
  BB9A   020C 804E      	LI	PORT,IDE_COMMAND	;STATUS
  BB9E   3481           BSY1:	STCR	R1,BYTEWIDE			;GET STATUS REGISTER
  BBA0   0241 8000      	ANDI	R1,10000000B * 256		;IF BUSY, THEN WAIT
  BBA4   16FC           	JNE	BSY1
                        
  BBA6   020C 804E      	LI	PORT,IDE_COMMAND	;STATUS
  BBAA   3481           RDY1:	STCR	R1,BYTEWIDE			;GET STATUS REGISTER
  BBAC   0241 4000      	ANDI	R1,01000000B * 256		;WAIT FOR RDY TO BE SET
  BBB0   13FC           	JEQ	RDY1
  BBB2   2DC0           	RET
                        
                        ;when an error occurs, we get acc.0 set from a call to ide_drq
                        ;or ide_wait_not_busy (which read the drive's status register).  If
                        ;that error bit is set, we should jump here to read the drive's
                        ;explaination of the error, to be returned to the user.  If for
                        ;some reason the error code is zero (shouldn't happen), we'll
                        ;return 255, so that the main program can always depend on a
                        ;return of zero to indicate success.
                        ;
  BBB4   020C 8042      IDE_GET_ERROR:	LI	PORT, IDE_ERROR
  BBB8   04C1           	CLR	R1
  BBBA   3481           	STCR	R1,BYTEWIDE
  BBBC   D041           	MOVB	R1,R1
  BBBE   1303           	JEQ	IGE_X		;RETURN ERROR IN MSB OF R1
  BBC0   2FA0 BBC8      	MESG	@IDE_MSG1
  BBC4   2E81           	WHEX	R1
  BBC6   2DC0           IGE_X	RET
                        
  BBC8   4944 4520      IDE_MSG1:	TEXT	"IDE ERROR: "
  BBCC   4552 524F      
  BBD0   523A 20        
  BBD3   000D 000A      	WORD	0DH,0AH,0
  BBD7   0000           
  BBD9   00             	EVEN
                        ;
                        ; READ SECTOR.
                        ; LBA ORGANISED AS
                        ; LBA + 0 = MSB OR DRIVE/HEAD; LBA + 1 = CYL LSB; LBA + 2 = CYL MSB; LBA + 3 = SECTOR
                        ; R3 CONTAINS POINTER TO BUFFER
                        ; R5 HOLDS THE LBA
                        ;
  BBDA   C803 BD04      READ_SECTOR:	MOV	R3,@BUFPTR
  BBDE   2DA0 BC22      	CALL	@IDE_NOT_BUSY
  BBE2   2DA0 BC72      	CALL	@IDE_WR_LBA
  BBE6   020C 804E      	LI	PORT, IDE_COMMAND	;COMMAND REGISTER6
  BBEA   0201 2000      	LI	R1, IDE_CMD_READ	; READ BUFFER
  BBEE   3081           	LDCR	R1,BYTEWIDE
                        ;
  BBF0   2DA0 BC30      	CALL	@IDE_WAIT_DRQ
  BBF4   13DF           	JEQ	IDE_GET_ERROR
  BBF6   2DA0 BC46      	CALL	@IDE_READ_DATA
  BBFA   2DC0           	RET
                        ;
                        ;
                        ; THE ADDRESS OF THE BUFFER IS IN R3 AND LBA IS IN R5
                        ;
  BBFC   C803 BD04      WRITE_SECTOR:	MOV	R3,@BUFPTR
  BC00   2DA0 BC22      	CALL	@IDE_NOT_BUSY
  BC04   2DA0 BC72      	CALL	@IDE_WR_LBA
  BC08   020C 804E      	LI	PORT, IDE_COMMAND	;COMMAND REGISTER6
  BC0C   0201 3000      	LI	R1, IDE_CMD_WRITE	; WRITE BUFFER
  BC10   3081           	LDCR	R1,BYTEWIDE
                        ;
  BC12   2DA0 BC30      	CALL	@IDE_WAIT_DRQ
  BC16   2DA0 BC5C      	CALL	@IDE_WRITE_DATA
  BC1A   2DA0 0576      	CALL	@COPY2IMAGE
  BC1E   2DC0           	RET
                        ;
                        ;  ENTER WITH R3 CONTAINING THE SECTOR.   FOR LOW NUMBER SECTORS ON THE FIRST TRACK THIS
                        ;  SIMPLE APPROACH WILL WORK.
                        ;  LBA = 2 * SECTOR_NUMBER FOR TRACK 0
                        ;
  BC20   2DC0           GET_LBA:	RET
                        ;
                        ; WAIT FOR THE IDE DRIVE TO NOT BE BUSY
                        ;
  BC22   020C 804E      IDE_NOT_BUSY:	LI	PORT,IDE_COMMAND	;STATUS
  BC26   3481           BSY2	STCR	R1,BYTEWIDE			;GET STATUS REGISTER
  BC28   0241 8000      	ANDI	R1,10000000B * 256		;IF BUSY, THEN WAIT
  BC2C   16FC           	JNE	BSY2
  BC2E   2DC0           	RET
                        ;
                        ; WAIT FOR DRQ BEFORE READ DATA.  0 STATUS, ERROR
                        ;
  BC30   0700           IDE_WAIT_DRQ:	SETO	R0		;VERY CRUDE TIMEOUT
  BC32   020C 804E      	LI	PORT, IDE_COMMAND
  BC36   04C1           	CLR	R1
  BC38   0600           DRQ1	DEC	R0
  BC3A   1304           	JEQ	DRQ_X
  BC3C   3481           	STCR	R1,BYTEWIDE
  BC3E   0241 0800      	ANDI	R1,00001000B * 256	;WAUT FOR DRQ  READT, THEN WAIT
  BC42   13FA           	JEQ	DRQ1
  BC44   2DC0           DRQ_X	RET
                        ;
                        ; IDE Status Register:
                        ; bit 7: Busy 1=busy, 0=not busy
                        ;  bit 6: Ready 1=ready for command, 0=not ready yet
                        ; bit 5: DF 1=fault occured inside drive
                        ; bit 4: DSC 1=seek complete
                        ; bit 3: DRQ 1=data request ready, 0=not ready to xfer yet
                        ; bit 2: CORR 1=correctable error occured
                        ; bit 1: IDX vendor specific
                        ; bit 0: ERR 1=error occured
                        ;;------------------------------------------------------------------
                        ;
                        ; BECAUSE IDE TRANSFERS ARE IN 16 BIT WORDS AND WE ONLY HAVE ACCESS TO 8 BIT
                        ; TRANSFERS, 256 BYTES REPRESENTS A SECTOR.
                        ;
                        ;
                        ;
  BC46   C120 BD04      IDE_READ_DATA:	MOV	@BUFPTR,R4
  BC4A   0200 0200      	LI	R0,512
  BC4E   020C 8040      	LI	PORT,IDE_DATA	 	;DATA REG
  BC52   3481           RL11:	STCR	R1,BYTEWIDE		;
  BC54   DD01           	MOVB	R1,*R4+
  BC56   0600           	DEC	R0
  BC58   16FC           	JNE	RL11
  BC5A   2DC0           	RET
                        ;
                        ; BECAUSE IDE TRANSFERS ARE IN 16 BIT WORDS AND WE ONLY HAVE ACCESS TO 8 BIT
                        ; TRANSFERS, 256 BYTES REPRESENTS A SECTOR.
                        ;
                        
  BC5C   C120 BD04      IDE_WRITE_DATA:	MOV	@BUFPTR,R4
  BC60   0200 0200      	LI	R0,512
  BC64   020C 8040      	LI	PORT,IDE_DATA	 	;DATA REG
  BC68   D074           WL11:	MOVB	*R4+,R1
  BC6A   3081           	LDCR	R1,BYTEWIDE		;
  BC6C   0600           	DEC	R0
  BC6E   16FC           	JNE	WL11
  BC70   2DC0           	RET
                        
                        ;
                        ; WRITE THE LOGICAL BLOCK ADDRESS TO THE DRIVE'S REGISTERS
                        ; ORGANISED AS:
                        ; LBA	WORD	0,0
                        ;
                        ; LBA + 3 = HEAD   (MSB)
                        ; LBA + 2 = CYL MSB
                        ; LBA + 1 = CYL LSB
                        ; LBA + 0 = SECTOR (LSB )
                        ; LBA VALUE PASSED IN R4 AND R5 (LSB)
                        ;
  BC72   04E0 BF36      IDE_WR_LBA:	CLR	@LBA
  BC76   C805 BF38      	MOV	R5,@LBA+2
  BC7A   D060 BF36      	MOVB	@LBA+0,R1		;GET THE FIRST MSB BYTE
  BC7E   0241 0F00      	ANDI	R1,0FH*256
  BC82   0261 E000      	ORI	R1,0E0H*256		; 0EH IS JUST THE 1110 CODE FOR HEAD REGISTER
  BC86   020C 804C      	LI	PORT,IDE_HEAD		; IDE HEAD
  BC8A   3081           	LDCR	R1,BYTEWIDE
                        ;
  BC8C   D060 BF37      	MOVB	@LBA+1,R1
  BC90   020C 804A      	LI	PORT,IDE_CYL_MSB	;CYLINDER MSB
  BC94   3081           	LDCR	R1,BYTEWIDE
                        
  BC96   D060 BF38      	MOVB	@LBA+2,R1
  BC9A   020C 8048      	LI	PORT,IDE_CYL_LSB	;CYLINDER LSB
  BC9E   3081           	LDCR	R1,BYTEWIDE
                        
  BCA0   D060 BF39      	MOVB	@LBA+3,R1
  BCA4   020C 8046      	LI	PORT,IDE_SECTOR		;CYLINDER LSB
  BCA8   3081           	LDCR	R1,BYTEWIDE
                        ;
                        ; WE NEED TO READ TWO SECTORS TO GET 512 BYTES DUE TO THE FACT THAT WE CAN'T DO 16 BIT READS/WRITES
                        ;
  BCAA   0201 0200      	LI	R1,2*256		;
  BCAE   020C 8044      	LI	PORT,IDE_SEC_CNT		;CYLINDER LSB
  BCB2   3081           	LDCR	R1,BYTEWIDE
  BCB4   2DC0           	RET
                        ;
                        ;
                        ;--SYSTEM FILE NAMES
                        ;
  BCB6   5348 454C      SHELL	TEXT	'SHELL   SYS'
  BCBA   4C20 2020      
  BCBE   5359 53        
  BCC1   4244 4F53      BDOS	TEXT	'BDOS    SYS'
  BCC5   2020 2020      
  BCC9   5359 53        
                        ;
                        ;--LOADER MESSAGES
                        ;
  BCCC   0D0A           LDMSG	BYTE	0DH,0AH,
  BCCE   426F 6F74      	TEXT 	"Boot-no system files..."
  BCD2   2D6E 6F20      
  BCD6   7379 7374      
  BCDA   656D 2066      
  BCDE   696C 6573      
  BCE2   2E2E 2E        
  BCE5   0D0A 00        	BYTE	0DH,0AH,00
  BCE8                  	EVEN
                        
  BCFE                  	AORG	LOADER + 510
  BCFE   BB00           	WORD	LOADER		;THIS WILL PUT THE LOAD ADDRESS AS THE LAST WORD
  0200                  SIZE:	EQU	$-LOADER
  BD00                  	BSS	512-SIZE
                        ;
                        ;---------END OF LOAD MODULE----SIZE < 512 BYTES -------------
                        ;
                        ;  BUFFER AND WORKSPACES REGIONS
                        ;
  BD00   0000           NAMPTR	WORD	0
  BD02   0000           CDSEC	WORD	0		;CURRENT DIRECTORY SECTOR
  BD04   0000           BUFPTR	WORD	0
  BD06                  WORKSP	BSS	32
  BD26                  STACKL	BSS	16
  BD34                  STACKP  	EQU	$-2
  BD36                  IOBUF	BSS	512
                        ;
  BF36                  LBA:	BSS	4
  BF3A   2000           IMAGEPTR	WORD	2000H
  2000                  	AORG	2000H
  2000                  IMAGE:	BSS	2048
  2800                  	END

No error(s).
FINAL_LBA        0010  IGE_X            BBC6  IDE_CMD_SUP      E100  IDIR3            0628  
IDE_GET_ERROR    BBB4  RET              2DC0  LOADER           BB00  LBA              BF36  
RDY1             BBAA  R13              000D  WRTSYS           0662  IBAT3            05D4  
NDIRSEC          0004  IDE_CMD_READ     2000  IDE_WR_LBA       BC72  DRQ1             BC38  
SHELLSYS         0502  INITSYS          062A  IDIR1            060C  IDE_CMD_SDOWN    E000  
R1               0001  IDE_DRDY         0040  R3               0003  INITBAT          05A6  
R4               0004  MONITOR          F000  R5               0005  GET_LBA          BC20  
R7               0007  NAMPTR           BD00  R8               0008  INITDIR          0600  
IDE_CMD_WRITE    3000  INTSYS2          0638  R11              000B  IDE_HEAD         804C  
NAMSIZ           000B  LOAD1            BB46  BLK2_LBA         0012  R14              000E  
DRQ_X            BC44  IBAT4            05EC  IDE_ERROR        8042  IDE_READY        BB90  
WRITE            2F00  IDE_CONTROL      804C  IDE_DSC          0010  IMAGE            2000  
IDIR2            0618  STACKL           BD26  R12              000C  STACKP           BD34  
BDOSSYS          0522  START            0552  SL               0009  IDE_DWF          0020  
SP               000A  LDMSG            BCCC  RETRY            0550  IDE_CMD_RECAL    1000  
IDE_SEC_CNT      8044  SHELL_ADDR       C300  IDE_STATUS       804E  BYTEWIDE         0002  
IDE_CMD_INIT     9100  IDE_BSY          0080  LOADERR          BB88  MATCH            BB72  
PORT             000C  R15              000F  WRTSYS1          0666  IDE_NOT_BUSY     BC22  
BYTSEC           0200  COPY2IMAGE       0576  R2               0002  IDE_WAIT_DRQ     BC30  
BSY2             BC26  MATCH1           BB7A  PUSH             2E00  MATCH2           BB84  
BATINT           0542  POP              2E40  READ             2F40  FLA              0010  
IDE_BASE_PORT    8040  FSZ              000E  IDE_WRITE_DATA   BC5C  CALL             2D80  
RL11             BC52  IDE_COMMAND      804E  IDE_DATA         8040  CDSEC            BD02  
SIZE             0200  MESG             2F80  READ_SECTOR      BBDA  BOOT_LBA         0000  
INITBOOT         0598  IDE_CYL_LSB      8048  WORKSP           BD06  LOADSYS          BB42  
R0               0000  IDE_SECTOR       8046  R6               0006  IDE_MSG1         BBC8  
IBAT1            05AE  FSB              000C  WRITE_SECTOR     BBFC  IOBUF            BD36  
IBAT2            05BC  WL11             BC68  IDE_CMD_ID       EC00  BAT_LBA          0002  
IDE_READ_DATA    BC46  IDE_CYL_MSB      804A  BSY1             BB9E  DIR_LBA          0008  
SUCCESS          0588  SECBLK           0004  WHEX             2E80  CRN              001A  
BUFPTR           BD04  DEBUG            2FC0  IDE_ERR          0001  IDE_DRQ          0010  
IMAGEPTR         BF3A  BDOS             BCC1  SHELL            BCB6  
