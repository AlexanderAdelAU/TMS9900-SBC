;
;****************************************
;
;	DISK INITIALISER
;
;	THIS PROGRAMME WILL INITIALISE THE BAT ETC
;
;**************************************
;
;
R0	EQU	0
R1	EQU	1
R2	EQU	2
R3	EQU	3
R4	EQU	4
R5	EQU	5
R6	EQU	6
R7	EQU	7
R8	EQU	8
SL	EQU	9
SP	EQU	10
R11	EQU	11
R12	EQU	12
R13	EQU	13
R14	EQU	14
R15	EQU	15
;
;	DEFINE SOME XOP'S
;
	DXOP	CALL,6
	DXOP	RET,7
	DXOP	PUSH,8
	DXOP	POP,9
	DXOP	WHEX,10
	DXOP	WRITE,12		;WRITE CHAR IN MSB
	DXOP	READ,13			;READ CHAR IN MSB
	DXOP	MESG,14			;OUTPUT NULL TERMINATED MESSAGE
;
;
	AORG	0100H
	JMP	START
;	
;
;
;---FCB ENTRY EQUATES
;
FLA	EQU	16			;LOAD ADDRESS	
CRN	EQU	26			;NEXT RECORD TO READ
FSB	EQU	12			;TWO BYTES HOLD TRACK AND SECTOR
FSZ	EQU	14			;NUMBER OF SECTORS TO LOAD
;
;NOTE THERE ARE NOW 12 SECTORS PER BLOCK
;SO SECTOR 2 IS THE FIRST BLOCK AFTER THE BOOT SECTOR
;
;SO WORD BELOW IS INTERPRETED AS
; FSB, FSZ AND FLA
;

;
;--SYSTEM DIRECTORY ENTRY BLOCKS
;
;
SHELL	TEXT	'SHELL   SYS'
	BYTE	0			;FILE TYPE
	WORD	2,7,0CA00H,0,0,0,0,0,0,0	;FSB,FSZ,FLA  4 SECT PER BLOCK MEANS 2 BATS IF 5
;
BDOS	TEXT	'BDOS    SYS'
	BYTE	0
	WORD	4,7,0D800H,0,0,0,0,0,0,0 	;TWO BAT ENTERIES
;
SAVE	TEXT	'SAVE    EXE'		;NOTE, DON'T LOAD SAVE
	BYTE	2			;TYPE 2 IS EXECUTABLE
	WORD	6,2,0C200H,0,0,0,0,0,0,0 	;SAVE COMMAND ONE BAT ENTERY

DIR	TEXT	'DIR     EXE'		;NOTE, DON'T LOAD SAVE
	BYTE	2			;TYPE 2 IS EXECUTABLE
	WORD	7,2,0C400H,0,0,0,0,0,0,0 	;SAVE COMMAND ONE BAT ENTERY

;
;BAT INITIALISER 
;
BATINT	WORD	0FFF8H,0FFF8H		;RESERVERD FOR BOOT,BAT AND DIRECTORY ENTRIES + FUTURE
	WORD	2,0FFF8H		;SHELL [BLOCKS 2 AND 3]
	WORD	4,0FFF8H		;BDOS [BLOCKS 4 AND 5]
	WORD	0FFF8H			;SAVE [BLOCK 6]
	WORD	0			;END OF TABLE
;
MONITOR	EQU	0E600H
SHELL_ADDR	EQU	0CA00H
DEBUG	EQU	0F000H
WBOOT	EQU	MONITOR+9*4		;WARM BOOT
SELDSK	EQU	MONITOR+3*4		;SELECT A DISK
RECAL	EQU	MONITOR+4*4		;HOME THE DRIVE
SEEK	EQU	MONITOR+5*4		;SEEK A TRACK
RDREC	EQU	MONITOR+6*4		;READ A SECTOR
WRREC	EQU	MONITOR+7*4		;WRITE A SECTOR
RDID	EQU	MONITOR+8*4
;
;
TRKDSK	EQU	80			;TRACKS PER DISK SIDE
SECTRK	EQU	18			;SECTORS PER TRACK
BYTSEC	EQU	512			;BYTES PER SECTOR
SECBLK	EQU	4			;SECTOR PER BLOCK
NSIDES	EQU	2			;NUMBER OF SIDES
RSVDSEC	EQU	1			;RESERVED SECTORS FOR BOOT SECTOR
SECDSK	EQU	NSIDES*SECTRK*TRKDSK	;SECTORS ON DISK
NBATS	EQU	1			;NO OF BAT ENTRIES
BATSEC	EQU	RSVDSEC+1		;START SECTOR
BATTRK	EQU	0			;START TRACK
DIRTRK	EQU	0			;DIRECTORY STARTS HERE
FDIRSEC	EQU	5
NDIRSEC	EQU	4
NAMSIZ	EQU	11			;DIRECTORY NAME SIZE
;
;
;
;	AS WE ARE USING OUR OWN WP, WE NEED TO RETURN DIRECTLY TO SHELL
;
	EVEN
START	LWPI	WORKSP		;USE LOCAL WORKSPACE
	LI	SP,STACKP
	LI	SL,STACKL
	BLWP	@MONITOR		;SET UP SYSTEM VECTORS THROUGH MONITOR
	CLR	R2		;ALWAYS DRIVE A
	CALL	@SELDSK		;SELECT
	CALL	@RECAL		;HOME
	CALL	@INITBOOT		;INITIALISE BOOT SECTOR
	CALL	@INITBAT		;INITIALISE BAT
	CALL	@INITDIR		;INITIALISE DIRECTORY	
	CALL	@INITSYS		;INITIALISE SYSTEM FILES
	LI	R0,20
	CALL	@WAIT
EXIT	B	@DEBUG
;
;--INITIALISE THE BOOT SECTOR
;
INITBOOT	LI	R4,LOADER		;ADDRESS OF LOADER MODULE
	LI	R3,1		;BOOT SECTOR
	CALL	@WRREC		;WRITE OUT THE LOADER
	RET		
;
;
;INITIALISE THE BAT
;
;
INITBAT	LI	R1,IOBUF
	LI	R0,BYTSEC		;FLUSH BUFFER
IBAT1	CLR	*R1+		;CLEAR BAT ENTRY
	DECT	R0		;FINISHED ?
	JNE	IBAT1
;
;--BAT INITIALISER TABLE TRANSFERRED
;
	LI	R0,BATINT		;BAT ALLOCATION TABLE
	LI	R1,IOBUF
IBAT2	MOV	*R0+,*R1+		;ZERO INDICATES END OF TABLE
	JNE	IBAT2	
	LI	R3,BATTRK		;SEEK BAT TRACK
	CALL	@SEEK		;GO SEEK
	LI	R4,IOBUF
	LI	R3,BATSEC
	CALL	@WRREC		;WRITE OUT THE BUFFER
;
;	NEXT BAT SECTOR
;
	LI	R1,IOBUF
	LI	R0,BYTSEC		;INDEX TO LAST ENTRY
IBAT3	CLR	*R1+		;CLEAR BAT ENTRY
	DECT	R0		;FINISHED ?
	JNE	IBAT3
	LI	R3,BATTRK		;SEEK BAT TRACK
	CALL	@SEEK		;GO SEEK
	LI	R4,IOBUF
	LI	R3,BATSEC + 1
	CALL	@WRREC		;WRITE OUT THE BUFFER
;
; 	LAST BAT SECTOR
;
	LI	R1,IOBUF
	LI	R0,720-512 		;LAST BAT ENTRY
IBAT4	CLR	*R1+		;CLEAR BAT ENTRY
	DECT	R0		;FINISHED ?
	JNE	IBAT4
	SETO	*R1		;LAST LINK IS -1
	LI	R3,BATTRK		;SEEK BAT TRACK
	CALL	@SEEK		;GO SEEK
	LI	R4,IOBUF
	LI	R3,BATSEC + 2
	CALL	@WRREC	
	RET
;
;--INITIALISE DIRECTORY SECTORS
;
INITDIR	LI	R0,0E5E5H		;NULL ENTRY BYTE
	LI	R1,IOBUF
	LI	R2,BYTSEC
IDIR1	MOV	R0,*R1+		;FILL BUFFER
	DECT	R2
	JNE	IDIR1
	LI	R3,DIRTRK		;SEEK DIRECTORY TRACK
	CALL	@SEEK
	LI	R3,FDIRSEC		;FIRST DIRECTORY SECTOR
	MOV	R3,@CDSEC
IDIR2	LI	R4,IOBUF
	MOV	@CDSEC,R3		;GET NEXT DIRECTORY SECTOR
	AI	R3,-FDIRSEC		
	CI	R3,NDIRSEC		;FINISHED ?
	JEQ	IDIR3	
	MOV	@CDSEC,R3
	CALL	@WRREC		;WRITE OUT FIRST DIRECTORY BLOCKS
	INC	@CDSEC		;GO TO NEXT SECTOR
	JMP	IDIR2
IDIR3	RET
;
;---INITIALISE SYSTEM FILES
;
INITSYS	LI	R8,IOBUF		;FCB ADDRESS
	LI	R3,SHELL
	LI	R0,32*2		;FCB SIZE - JUST INIT SHELL and DOS
	MOV	R8,R1		;FCB ADDRESS
INTSYS2	MOVB	*R3+,*R1+		;TRANSFER DIRECTOR ENTRIES
	DEC	R0
	JNE	INTSYS2
	LI	R3,DIRTRK		;SEEK DIRECTORY TRACK
	CALL	@SEEK
	LI	R3,FDIRSEC		;FIRST DIRECTORY SECTOR
	MOV	R8,R4		;DIRECTORY ENTRY ADDRESS
	CALL	@WRREC
;
;--NOW WRITE OUT THE SYSTEM FILES
;
	LI	R8,IOBUF		;BEGIN WITH SHELL
	CALL	@WRTSYS
	AI	R8,32		;NOW BDOS
	CALL	@WRTSYS
;	AI	R8,32		;NOW SAVE
;	CALL	@WRTSYS
;	AI	R8,32		;NOW DIR
;	CALL	@WRTSYS
	RET			;ALL DONE
;
;--WRITE EACH SYSTEM FILE WHOSE FCB IS R8
;
WRTSYS 	MOV	@CRN(R8),R3		;BEGIN AT FIRST RECORD
	MOV	@FSB(R8),R1		;GET BAT INDEX			
	CALL	@TSCONV		;CONVERT R2=TRACK,R3=SECTOR
	PUSH	R3		;SAVE SECTOR
	MOV	R2,R3
	CALL	@SEEK		;SEEK THE TRACK
	POP	R3		;POP THE SECTOR
	MOV	@FLA(R8),R4		;LOAD ADDRESS			
	CALL	@WRREC		;READ IN A SECTOR
	LI	R0,BYTSEC
	A	R0,@FLA(R8)		;INCREMENT LOAD ADDRESS POINTER
	INC	@CRN(R8)
	DEC	@FSZ(R8)		;FINISHED ?
	JNE	WRTSYS		;NO
	RET
;
;
;WAIT FOR PERIOD IN R0
;
WAIT	DEC	R0
	JEQ	WAIT1
	SETO	R1
WAIT2	DEC	R1
	JNE	WAIT2
	JMP	WAIT
WAIT1	RET
;
;
;--------------------------------------------------------------------
;
;	LOADER MODULE
;
;	THIS MODULE WILL BE LOADED IN THE DISK BOOT SECTOR
;	AND WILL BE EXECUTED BY THE COLD BOOT MODULE WITHIN
;	THE MONITOR.  THE LOADER MODULE IS RESPONSIBLE FOR 
;	SEARCHING FOR, AND LOADING SHELL.SYS, BDOS.SYS AND BIOS.SYS.
;
;	IT ASSUMES THAT MONITOR HAS BEEN CALLED AN INITIALISED AND IS
;	CALLED FROM THE MONITOR (E360)
;
;	MODULE CANNOT BE LARGER THAT 512 BYTES
;
;-------------------------------------------------------------------
	AORG	0C600H
;
LOADER	;LWPI	WORKSP
	;LI	SP,STACKP
	;LI	SL,STACKL
	;
	; OKAY WE CAN NOW INTIALISE MONITOR AND CALL THE SHELL
	;
	;BLWP	@MONITOR
	WHEX	R2
	LI	R2,0
 	CALL	@SELDSK
	CALL	@RECAL
	LI	R3,DIRTRK		;SEEK DIRECTORY TRACK
	CALL	@SEEK
	MOV	R1,R1
	JLT	LOADERR
	LI	R3,FDIRSEC		;FIRST DIRECTORY SECTOR
	LI	R4,IOBUF
	CALL	@RDREC		;READ IN THE DIRECTORY
	JLT	LOADERR	
;
;--LOOK FOR THE SYSTEM FILES
;
	WHEX	R2
	LI	R8,IOBUF		;SHELL SYSTEM FIRST
	LI	R4,SHELLSYS		;NAME OF SYSTEM FILES
	CALL	@MATCH
	JLT	LOADERR
	CALL	@LOADSYS		;LOAD SHELL SYSTEM
;
;	NOW LOAD BDOS
;
	WHEX	R2
	LI	R4,BDOSSYS		;LOOK FOR BDOS FILE
	LI	R8,IOBUF
	AI	R8,32		;POINT TO NEXT DIRECTORY ENTRY
	CALL	@MATCH
	JLT	LOADERR
	WHEX	R2
	CALL	@LOADSYS		;LOAD BDOS SYSTEM
	WHEX	R2
;	B	@0F000H

	B	@SHELL_ADDR		;INITAILISE INTERRUPT VECTORS ETC AND GO TO SHELL ENTRY RATHER THAN VECTOR
	
;
;--LOAD SYSTEM FILE
;
;  R8 -> FCB
;
LOADSYS	CLR	@CRN(R8)
LOAD1	MOV	@CRN(R8),R3		;BEGIN AT FIRST RECORD	
	MOV	@FSB(R8),R1		;GET BAT INDEX			
	CALL	@TSCONV		;CONVERT R2=TRACK,R3=SECTOR
	PUSH	R3		;SAVE SECTOR
	MOV	R2,R3
	CALL	@SEEK		;SEEK THE TRACK
	POP	R3
	JNE	LOADERR		;R1 SET IN SEEK
	MOV	@FLA(R8),R4		;LOAD ADDRESS			
	CALL	@RDREC		;READ IN A SECTOR
	MOV	R1,R1
	JLT	LOADERR
	INC	@CRN(R8)		;UP RECORD COUNT
	LI	R0,BYTSEC
	A	R0,@FLA(R8)		;INCREMENT LOAD ADDRESS POINTER
	C	@CRN(R8),@FSZ(R8)	;FINISHED ?
	JNE	LOAD1		;No
	RET

;
;--MATCH A DIRECTORY ENTRY
;	R4->NAME TO MATCH
;	R8->DIRECTORY ENTRY
;
MATCH	MOV	R8,R3
	SETO	R1		;ERROR FLAG
	LI	R0,NAMSIZ 		;NUMBER OF CHARS TO MATCH
MATCH1	CB	*R4+,*R3+		;CHECK FOR SYSTEM FILES
	JNE	MATCH2		;MATCH ERROR
	DEC	R0	
	JNE	MATCH1	 	;CONTINUE
	CLR	R1
MATCH2	MOV	R1,R1
	RET
;
;
;------------------------------------------------------------------------
;
;	BLOCK TO TRACK SECTOR CONVERSION
;	CONVER NEXT RECORD IN FILE TO TRACK SECTOR
;
;	R1 = CURRENT BLOCK
;	R3 = CURRENT RECORD WITHIN FILE TO READ
;
;	RETURN WITH R2=TRACK,R3=SECTOR
;
;	TRK = INT((BLK*SECBLK + R3)/SECTRK)
;	SECT = REMAINDER(BLK...)+1		
;
;------------------------------------------------------------------------
;
TSCONV	CLR	R2
	LI	R0,SECBLK
	DIV	R0,R2		; THIS OFFSETS FROM THE FSB IE HOW MANY BLOCKS IN THE GIVEN CRN
	A	R2,R1		;R1=BLOCK,R3=OFFSET WITHIN BLOCK
;
;
;NOW GET TRACK AND SECTOR
;REVISED MULTIPLY TO AVOID 99105 MULTIPLY BUG
;
MPY	EQU	0
MCND	EQU	1
PROD	EQU	2
CNT	EQU	0

	LI	MPY,SECBLK
	CLR	PROD
	MOV	MPY,CNT
	JEQ	BTTSC2
BTTSC1	A	MCND,PROD		;R2=BLK*SECBLK 
	DEC	CNT
	JNE	BTTSC1
BTTSC2	A	R2,R3		;R3=BLK*SECBLK+R3
	CLR	R2		;MSB OF QUOTIENT
	LI	R0,SECTRK	 	;SECTORS/TRACK
	DIV	R0,R2	 	;R2=TRK,R3=SECT (R2+R3)/R0
	INC	R3		;TAKES CARE OF ZERO OFFSET FOR CRN
BTTSC0	RET
;
;
LOADERR MESG	@LDMSG
	B	@DEBUG
;
;--SYSTEM FILE NAMES
;
SHELLSYS	TEXT	'SHELL   SYS'
;
BDOSSYS	TEXT	'BDOS    SYS'
;
SAVEEXE	TEXT	'SAVE    EXE'	;SAVE IS NOW PART OF THE SHELL
;

;
;--LOADER MESSAGES
;
LDMSG	BYTE	0DH,0AH,
	TEXT 	"Can't boot - no system files..."
	BYTE	0DH,0AH,00
	EVEN
;
;---------END OF LOAD MODULE----SIZE < 512 BYTES -------------
;
;  BUFFER AND WORKSPACES REGIONS
;
NAMPTR	WORD	0
CDSEC	WORD	0		;CURRENT DIRECTORY SECTOR
BUFPTR	WORD	0
WORKSP	BSS	32
STACKL	BSS	64
STACKP  WORD	0
IOBUF	BSS	512

;
	END
